<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US">
<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Specifications in Mocha</title>
  <meta name="generator" content="Mocha &lt;https://mochajs.org/&gt;" />
  <meta name="license" content="MIT" />
  <meta name="copyright" content="&#169; 2016 Kevin Locke &lt;kevin@kevinlocke.name&gt;" />
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous" />
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" integrity="sha384-fLW2N01lMqjakBkx3l/M9EahuwpSfeNvV63J5ezn3uZzapT0u7EYsXMjQV+0En5r" crossorigin="anonymous" />
  <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/highlight.js/9.1.0/styles/github.min.css" />
  <style type="text/css">
section section {
  margin-left: 1em;
}
section section section section {
  margin-left: 0;
}
  </style>
</head>
<body>
  <div class="container">
    <section class="suite">
      <h1>stringify</h1>
      <dl>
        <dt>ignores undefined from replacer</dt>
        <dd><pre><code>strictEqual(
  stringify(1, () =&#x3E; undefined),
  &#x27;1&#x27;,
);</code></pre></dd>
        <dt>ignores null from replacer</dt>
        <dd><pre><code>strictEqual(
  stringify(1, () =&#x3E; null),
  &#x27;1&#x27;,
);</code></pre></dd>
        <dt>throws TypeError if replacer returns number</dt>
        <dd><pre><code>assert.throws(
  () =&#x3E; stringify(1, () =&#x3E; val),
  TypeError,
);</code></pre></dd>
        <dt>throws TypeError if replacer returns object</dt>
        <dd><pre><code>assert.throws(
  () =&#x3E; stringify(1, () =&#x3E; val),
  TypeError,
);</code></pre></dd>
        <dt>can replace undefined</dt>
        <dd><pre><code>strictEqual(
  stringify(undefined, () =&#x3E; &#x27;TEST&#x27;),
  &#x27;TEST&#x27;,
);</code></pre></dd>
        <dt>can replace with empty string</dt>
        <dd><pre><code>strictEqual(
  stringify(1, () =&#x3E; &#x27;&#x27;),
  &#x27;&#x27;,
);</code></pre></dd>
        <dt>can replace with empty string in Array</dt>
        <dd><pre><code>strictEqual(
  stringify([1, 2], (k, v) =&#x3E; (typeof v === &#x27;number&#x27; ? &#x27;&#x27; : undefined)),
  &#x27;[,]&#x27;,
);</code></pre></dd>
        <dt>does not call replacer on replaced values</dt>
        <dd><pre><code>const child = {};
const parent = { child };
let callCount = 0;
function replacer(k, v) {
  callCount += 1;
  strictEqual(callCount, 1);
  strictEqual(v, parent);
  return &#x27;TEST&#x27;;
}
strictEqual(
  stringify(parent, replacer),
  &#x27;TEST&#x27;,
);</code></pre></dd>
        <section class="suite">
          <h1>behaves like JSON.stringify</h1>
          <dl>
            <dt>has same .name</dt>
            <dd><pre><code>strictEqual(
  stringify.name,
  JSON.stringify.name,
);</code></pre></dd>
            <dt>has same .length</dt>
            <dd><pre><code>strictEqual(
  stringify.length,
  JSON.stringify.length,
);</code></pre></dd>
            <dt>for no arguments</dt>
            <dd><pre><code>strictEqual(
  stringify(),
  JSON.stringify(),
);</code></pre></dd>
            <dt>for one argument</dt>
            <dd><pre><code>strictEqual(
  stringify(mixed),
  JSON.stringify(mixed),
);</code></pre></dd>
            <dt>for empty Array replacer</dt>
            <dd><pre><code>strictEqual(
  stringify(mixed, []),
  JSON.stringify(mixed, []),
);</code></pre></dd>
            <dt>for non-empty Array replacer</dt>
            <dd><pre><code>strictEqual(
  stringify(mixed, [&#x27;true&#x27;]),
  JSON.stringify(mixed, [&#x27;true&#x27;]),
);</code></pre></dd>
            <dt>for number space</dt>
            <dd><pre><code>strictEqual(
  stringify(mixed, () =&#x3E; undefined, 2),
  JSON.stringify(mixed, null, 2),
);</code></pre></dd>
            <dt>for Number space</dt>
            <dd><pre><code>strictEqual(
  stringify(mixed, () =&#x3E; undefined, new Number(2)),
  JSON.stringify(mixed, null, new Number(2)),
);</code></pre></dd>
            <dt>for non-integer space</dt>
            <dd><pre><code>strictEqual(
  stringify(mixed, () =&#x3E; undefined, 2.6),
  JSON.stringify(mixed, null, 2.6),
);</code></pre></dd>
            <dt>for space larger than 10</dt>
            <dd><pre><code>strictEqual(
  stringify(mixed, () =&#x3E; undefined, 15),
  JSON.stringify(mixed, null, 15),
);</code></pre></dd>
            <dt>for negative space</dt>
            <dd><pre><code>strictEqual(
  stringify(mixed, () =&#x3E; undefined, -1),
  JSON.stringify(mixed, null, -1),
);</code></pre></dd>
            <dt>for string space</dt>
            <dd><pre><code>strictEqual(
  stringify(mixed, () =&#x3E; undefined, &#x27;X&#x27;),
  JSON.stringify(mixed, null, &#x27;X&#x27;),
);</code></pre></dd>
            <dt>for String space</dt>
            <dd><pre><code>strictEqual(
  stringify(mixed, () =&#x3E; undefined, new String(&#x27;X&#x27;)),
  JSON.stringify(mixed, null, new String(&#x27;X&#x27;)),
);</code></pre></dd>
            <dt>for empty string space</dt>
            <dd><pre><code>strictEqual(
  stringify(mixed, () =&#x3E; undefined, &#x27;&#x27;),
  JSON.stringify(mixed, null, &#x27;&#x27;),
);</code></pre></dd>
            <dt>for empty String space</dt>
            <dd><pre><code>strictEqual(
  stringify(mixed, () =&#x3E; undefined, new String(&#x27;&#x27;)),
  JSON.stringify(mixed, null, new String(&#x27;&#x27;)),
);</code></pre></dd>
            <dt>for string space longer than 10</dt>
            <dd><pre><code>strictEqual(
  stringify(mixed, () =&#x3E; undefined, &#x27;XXXXXXXXXXXXXXX&#x27;),
  JSON.stringify(mixed, null, &#x27;XXXXXXXXXXXXXXX&#x27;),
);</code></pre></dd>
            <dt>for Array with non-numeric keys</dt>
            <dd><pre><code>const arr = [];
arr.key1 = true;
arr.key2 = 1;
strictEqual(
  stringify(arr, () =&#x3E; undefined),
  JSON.stringify(arr),
);</code></pre></dd>
            <dt>calls replacer with same arguments</dt>
            <dd><pre><code>const actualArgs = [];
const actualThis = [];
stringify(mixed, function() {
  actualThis.push(this);
  actualArgs.push(arguments); // eslint-disable-line prefer-rest-params
});
const expectedArgs = [];
const expectedThis = [];
JSON.stringify(mixed, function(k, v) {
  expectedThis.push(this);
  expectedArgs.push(arguments); // eslint-disable-line prefer-rest-params
  return v;
});
deepStrictEqual(actualArgs, expectedArgs);
deepStrictEqual(actualThis, expectedThis);</code></pre></dd>
            <dt>omitting first value in object</dt>
            <dd><pre><code>const obj = { a: 1, b: 2 };
strictEqual(
  stringify(obj, (k) =&#x3E; k !== &#x27;a&#x27;, 2),
  JSON.stringify(obj, (k, v) =&#x3E; (k === &#x27;a&#x27; ? undefined : v), 2),
);</code></pre></dd>
            <dt>omitting last value in object</dt>
            <dd><pre><code>const obj = { a: 1, b: 2 };
strictEqual(
  stringify(obj, (k) =&#x3E; k !== &#x27;b&#x27;, 2),
  JSON.stringify(obj, (k, v) =&#x3E; (k === &#x27;b&#x27; ? undefined : v), 2),
);</code></pre></dd>
            <dt>omitting only value in object</dt>
            <dd><pre><code>const obj = { a: 1 };
strictEqual(
  stringify(obj, (k) =&#x3E; k !== &#x27;a&#x27;, 2),
  JSON.stringify(obj, (k, v) =&#x3E; (k === &#x27;a&#x27; ? undefined : v), 2),
);</code></pre></dd>
            <dt>omitting first value in Array</dt>
            <dd><pre><code>const arr = [1, 2];
strictEqual(
  stringify(arr, (k) =&#x3E; k !== &#x27;0&#x27;, 2),
  JSON.stringify(arr, (k, v) =&#x3E; (k === &#x27;0&#x27; ? undefined : v), 2),
);</code></pre></dd>
            <dt>omitting last value in Array</dt>
            <dd><pre><code>const arr = [1, 2];
strictEqual(
  stringify(arr, (k) =&#x3E; k !== &#x27;1&#x27;, 2),
  JSON.stringify(arr, (k, v) =&#x3E; (k === &#x27;1&#x27; ? undefined : v), 2),
);</code></pre></dd>
            <dt>omitting only value in Array</dt>
            <dd><pre><code>const arr = [1];
strictEqual(
  stringify(arr, (k) =&#x3E; k !== &#x27;0&#x27;, 2),
  JSON.stringify(arr, (k, v) =&#x3E; (k === &#x27;0&#x27; ? undefined : v), 2),
);</code></pre></dd>
            <dt>for directly cyclic object</dt>
            <dd><pre><code>const obj = {};
obj.obj = obj;
let errActual;
try {
  stringify(obj, () =&#x3E; undefined);
} catch (err) {
  errActual = err;
}
let errExpected;
try {
  JSON.stringify(obj);
} catch (err) {
  errExpected = err;
}
// Error message contains circular path since Node 12.
// Only check that our message is a prefix of built-in message
if (errActual
  &#x26;&#x26; errExpected
  &#x26;&#x26; errExpected.message.startsWith(errActual.message)) {
  errActual.message = errExpected.message;
}
deepStrictEqual(errActual, errExpected);</code></pre></dd>
            <dt>for indirectly cyclic object</dt>
            <dd><pre><code>const obj1 = {};
obj1.obj2 = { obj1 };
let errActual;
try {
  stringify(obj1, () =&#x3E; undefined);
} catch (err) {
  errActual = err;
}
let errExpected;
try {
  JSON.stringify(obj1);
} catch (err) {
  errExpected = err;
}
// Error message contains circular path since Node 12.
// Only check that our message is a prefix of built-in message
if (errActual
  &#x26;&#x26; errExpected
  &#x26;&#x26; errExpected.message.startsWith(errActual.message)) {
  errActual.message = errExpected.message;
}
deepStrictEqual(errActual, errExpected);</code></pre></dd>
            <dt>for repeated object</dt>
            <dd><pre><code>const obj = {};
const arr = [obj, obj];
strictEqual(
  stringify(arr, () =&#x3E; undefined),
  JSON.stringify(arr),
);</code></pre></dd>
            <dt>for .toJSON on Boolean prototype</dt>
            <dd><pre><code>obj.constructor.prototype.toJSON = () =&#x3E; &#x27;HERE&#x27;;
try {
  strictEqual(
    stringify(obj, () =&#x3E; undefined),
    JSON.stringify(obj),
  );
} finally {
  delete obj.constructor.prototype.toJSON;
}</code></pre></dd>
            <dt>for .toJSON on Boolean</dt>
            <dd><pre><code>obj.toJSON = () =&#x3E; &#x27;HERE&#x27;;
strictEqual(
  stringify(obj, () =&#x3E; undefined),
  JSON.stringify(obj),
);</code></pre></dd>
            <dt>for .toJSON on Number prototype</dt>
            <dd><pre><code>obj.constructor.prototype.toJSON = () =&#x3E; &#x27;HERE&#x27;;
try {
  strictEqual(
    stringify(obj, () =&#x3E; undefined),
    JSON.stringify(obj),
  );
} finally {
  delete obj.constructor.prototype.toJSON;
}</code></pre></dd>
            <dt>for .toJSON on Number</dt>
            <dd><pre><code>obj.toJSON = () =&#x3E; &#x27;HERE&#x27;;
strictEqual(
  stringify(obj, () =&#x3E; undefined),
  JSON.stringify(obj),
);</code></pre></dd>
            <dt>for .toJSON on String prototype</dt>
            <dd><pre><code>obj.constructor.prototype.toJSON = () =&#x3E; &#x27;HERE&#x27;;
try {
  strictEqual(
    stringify(obj, () =&#x3E; undefined),
    JSON.stringify(obj),
  );
} finally {
  delete obj.constructor.prototype.toJSON;
}</code></pre></dd>
            <dt>for .toJSON on String</dt>
            <dd><pre><code>obj.toJSON = () =&#x3E; &#x27;HERE&#x27;;
strictEqual(
  stringify(obj, () =&#x3E; undefined),
  JSON.stringify(obj),
);</code></pre></dd>
            <section class="suite">
              <h1>BigInt</h1>
              <dl>
                <dt>for bigint</dt>
                <dd><pre><code>throwsSame(
  () =&#x3E; stringify(BigInt(2), () =&#x3E; undefined),
  () =&#x3E; JSON.stringify(BigInt(2)),
  true,
);</code></pre></dd>
                <dt>for BigInt</dt>
                <dd><pre><code>throwsSame(
  () =&#x3E; stringify(Object(BigInt(2)), () =&#x3E; undefined),
  () =&#x3E; JSON.stringify(Object(BigInt(2))),
  true,
);</code></pre></dd>
                <dt>for bigint with BigInt.prototype.toJSON</dt>
                <dd><pre><code>// eslint-disable-next-line no-extend-native
BigInt.prototype.toJSON = (k, v) =&#x3E; &#x60;${v}n&#x60;;
try {
  strictEqual(
    stringify(BigInt(2), () =&#x3E; undefined),
    JSON.stringify(BigInt(2)),
  );
} finally {
  delete BigInt.prototype.toJSON;
}</code></pre></dd>
                <dt>for BigInt with BigInt.prototype.toJSON</dt>
                <dd><pre><code>// eslint-disable-next-line no-extend-native
BigInt.prototype.toJSON = (k, v) =&#x3E; &#x60;${v}n&#x60;;
try {
  strictEqual(
    stringify(Object(BigInt(2)), () =&#x3E; undefined),
    JSON.stringify(Object(BigInt(2))),
  );
} finally {
  delete BigInt.prototype.toJSON;
}</code></pre></dd>
              </dl>
            </section>
            <section class="suite">
              <h1>Symbol</h1>
              <dl>
                <dt>for symbol</dt>
                <dd><pre><code>strictEqual(
  stringify(symbol, () =&#x3E; undefined),
  JSON.stringify(symbol),
);</code></pre></dd>
                <dt>for Symbol</dt>
                <dd><pre><code>strictEqual(
  stringify(symbolObj, () =&#x3E; undefined),
  JSON.stringify(symbolObj),
);</code></pre></dd>
                <dt>for symbol with Symbol.prototype.toJSON</dt>
                <dd><pre><code>// eslint-disable-next-line no-extend-native
Symbol.prototype.toJSON = (k, v) =&#x3E; &#x60;${v}&#x60;;
try {
  strictEqual(
    stringify(symbol, () =&#x3E; undefined),
    JSON.stringify(symbol),
  );
} finally {
  delete Symbol.prototype.toJSON;
}</code></pre></dd>
                <dt>for Symbol with Symbol.prototype.toJSON</dt>
                <dd><pre><code>// eslint-disable-next-line no-extend-native
Symbol.prototype.toJSON = (k, v) =&#x3E; &#x60;${v}&#x60;;
try {
  strictEqual(
    stringify(symbolObj, () =&#x3E; undefined),
    JSON.stringify(symbolObj),
  );
} finally {
  delete Symbol.prototype.toJSON;
}</code></pre></dd>
                <dt>for symbol properties</dt>
                <dd><pre><code>const obj = { [symbol]: true };
strictEqual(
  stringify(obj, () =&#x3E; undefined),
  JSON.stringify(obj),
);</code></pre></dd>
              </dl>
            </section>
          </dl>
        </section>
        <section class="suite">
          <h1>false from replacer</h1>
          <dl>
            <dt>produces undefined for top value</dt>
            <dd><pre><code>strictEqual(
  stringify({}, () =&#x3E; false),
  undefined,
);</code></pre></dd>
            <dt>omits key from object</dt>
            <dd><pre><code>strictEqual(
  stringify({ a: true, b: true }, (k) =&#x3E; k !== &#x27;a&#x27;),
  &#x27;{&#x22;b&#x22;:true}&#x27;,
);</code></pre></dd>
            <dt>produces null in array</dt>
            <dd><pre><code>strictEqual(
  stringify([1, 2, 3], (k) =&#x3E; k !== &#x27;1&#x27;),
  &#x27;[1,null,3]&#x27;,
);</code></pre></dd>
          </dl>
        </section>
      </dl>
    </section>
  </div><!-- .container -->

  <script type="text/javascript" src="https://cdn.jsdelivr.net/jquery/2.2.1/jquery.min.js"></script>
  <script type="text/javascript" src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
  <script type="text/javascript" src="https://cdn.jsdelivr.net/highlight.js/9.1.0/highlight.min.js"></script>
  <script type="text/javascript">//<![CDATA[
'use strict';
// Adjust the nested heading level to match depth
$('section section h1').each(function() {
  var $this = $(this);
  var depth = Math.min($this.parents('section').length, 6);
  // http://stackoverflow.com/a/30059450/503410
  $this.wrapInner(document.createElement('h' + depth)).children().unwrap();
});

// Make the tests collapsible
var testNum = 0;
$('dt + dd')
  .addClass('collapse')
  .attr('role', 'tabpanel')
  .attr('aria-expanded', 'false')
  .each(function() {
    var $this = $(this);
    var $dt = $this.prev();

    ++testNum;
    var id = 'test' + testNum;
    var idDt = id + '-title';
    var idDd = id + '-desc';

    $dt.attr('id', idDt);
    $this.attr('id', idDd);

    $dt.wrapInner('<a role="button" data-toggle="collapse" href="#' + idDd +
        '" aria-expanded="false" aria-controls="' + idDd + '"></a>')
      .children()
      .collapse();
  });

// Enable syntax highlighting for the code (which is all JavaScript)
hljs.configure({languages: ['javascript']});
hljs.initHighlighting();
//]]></script>
</body>
</html>
